#!/usr/bin/python

#XXX: EXTRACT THOSE FROM params.h
from params import paramList as pl

n=pl['PARAM_N']
m=pl['PARAM_M']


print "reg256 r0"
print "reg256 r1"
print "reg256 r2"
print "reg256 r3"
print "reg256 r4"
print "reg256 r5"
print "reg256 r6"
print "reg256 r7"
print "reg256 r8"
print "reg256 r9"
print "reg256 r10"
print "reg256 r11"
print ""
print "reg256 b"
print "reg256 c"
print ""
print "reg256 a0"
print "reg256 a1"
print "reg256 a2"
print "reg256 qinv"
print "reg256 q"
print ""
print "int64 rp"
print "int64 ap"
print "int64 bp"
print ""
print "int64 ictr"
print "int64 jctr"
print "int64 redctr"
print ""
print "enter mul_mn_uniQ_n_uniB3x"
print ""
print "rp = input_0"
print "ap = input_2"
print ""
print "ictr = "+str(m)
print ""
print "bp = input_1"
print "redctr = 63"
print ""
print "a0 = (4x double)(4x int32)mem128[ap +   0]"
print "a1 = (4x double)(4x int32)mem128[ap +   16]"
print ""
print "b  = mem64[bp +  0],mem64[bp +  0],mem64[bp +  0],mem64[bp +  0]"
print "4x r0 = approx b * a0"
print "4x r1 = approx b * a1"
print ""
print "b  = mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"]"
print "4x r3 = approx b * a0"
print "4x r4 = approx b * a1"
print ""
print "b  = mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"]"
print "4x r6 = approx b * a0"
print "4x r7 = approx b * a1"
print ""
print "jctr = "+str(n-1)
print "jflooptop:"
print "bp += 8"
print "ap += "+str(4*m)
print ""
print "a0 = (4x double)(4x int32)mem128[ap +   0]"
print "a1 = (4x double)(4x int32)mem128[ap +   16]"
print ""
print "b  = mem64[bp +  0],mem64[bp +  0],mem64[bp +  0],mem64[bp +  0]"
print "4x r0 approx+=  b * a0"
print "4x r1 approx+=  b * a1"
print ""
print "b  = mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"]"
print "4x r3 approx+=  b * a0"
print "4x r4 approx+=  b * a1"
print ""
print "b  = mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"]"
print "4x r6 approx+=  b * a0"
print "4x r7 approx+=  b * a1"
print ""
print "unsigned>? redctr -= 1"
print "goto noreducef if unsigned>"
print ""
print "qinv = mem256[qinv4x]"
print "q = mem256[q4x]"
print ""
print "4x c = approx r0 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r0 approx -= c"
print ""
print "4x c = approx r1 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r1 approx -= c"
print ""
print "4x c = approx r3 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r3 approx -= c"
print ""
print "4x c = approx r4 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r4 approx -= c"
print ""
print "4x c = approx r6 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r6 approx -= c"
print ""
print "4x c = approx r7 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r7 approx -= c"
print ""
print "redctr = 64"
print ""
print "noreducef:"

print "unsigned>? jctr -= 1"
print "goto jflooptop if unsigned>"

print "qinv = mem256[qinv4x]"
print "q = mem256[q4x]"
print ""
print "4x c = approx r0 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r0 approx -= c"
print ""
print "4x c = approx r1 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r1 approx -= c"
print ""
print "4x c = approx r3 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r3 approx -= c"
print ""
print "4x c = approx r4 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r4 approx -= c"
print ""
print "4x c = approx r6 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r6 approx -= c"
print ""
print "4x c = approx r7 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r7 approx -= c"
print ""
print "mem256[rp +     0] = r0"
print "mem256[rp +    32] = r1"
print "mem256[rp +  "+str(8*m)+"] = r3"
print "mem256[rp + "+str(8*m+32)+"] = r4"
print "mem256[rp + "+str(16*m)+"] = r6"
print "mem256[rp + "+str(16*m+32)+"] = r7"
print ""
print "rp+=64"
print "ap -= "+str((n-1)*4*m-32)
print "ictr -= 8"
print ""
print "ilooptop:"
print "bp = input_1"
print "redctr = 63"
print ""
print "a0 = (4x double)(4x int32)mem128[ap +   0]"
print "a1 = (4x double)(4x int32)mem128[ap +   16]"
print "a2 = (4x double)(4x int32)mem128[ap +   32]"
print ""
print "b  = mem64[bp +  0],mem64[bp +  0],mem64[bp +  0],mem64[bp +  0]"
print "4x r0 = approx b * a0"
print "4x r1 = approx b * a1"
print "4x r2 = approx b * a2"
print ""
print "b  = mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"]"
print "4x r3 = approx b * a0"
print "4x r4 = approx b * a1"
print "4x r5 = approx b * a2"
print ""
print "b  = mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"]"
print "4x r6 = approx b * a0"
print "4x r7 = approx b * a1"
print "4x r8 = approx b * a2"
print ""
print "jctr = "+str(n-1)
print "jlooptop:"
print "bp += 8"
print "ap += "+str(4*m)
print ""
print "a0 = (4x double)(4x int32)mem128[ap +   0]"
print "a1 = (4x double)(4x int32)mem128[ap +   16]"
print "a2 = (4x double)(4x int32)mem128[ap +   32]"
print ""
print "b  = mem64[bp +  0],mem64[bp +  0],mem64[bp +  0],mem64[bp +  0]"
print "4x r0 approx+=  b * a0"
print "4x r1 approx+=  b * a1"
print "4x r2 approx+=  b * a2"
print ""
print "b  = mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"],mem64[bp +  "+str(8*n)+"]"
print "4x r3 approx+=  b * a0"
print "4x r4 approx+=  b * a1"
print "4x r5 approx+=  b * a2"
print ""
print "b  = mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"],mem64[bp +  "+str(16*n)+"]"
print "4x r6 approx+=  b * a0"
print "4x r7 approx+=  b * a1"
print "4x r8 approx+=  b * a2"
print ""
print "unsigned>? redctr -= 1"
print "goto noreduce if unsigned>"
print ""
print "qinv = mem256[qinv4x]"
print "q = mem256[q4x]"
print ""
print "4x c = approx r0 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r0 approx -= c"
print ""
print "4x c = approx r1 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r1 approx -= c"
print ""
print "4x c = approx r2 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r2 approx -= c"
print ""
print "4x c = approx r3 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r3 approx -= c"
print ""
print "4x c = approx r4 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r4 approx -= c"
print ""
print "4x c = approx r5 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r5 approx -= c"
print ""
print "4x c = approx r6 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r6 approx -= c"
print ""
print "4x c = approx r7 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r7 approx -= c"
print ""
print "4x c = approx r8 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r8 approx -= c"
print ""
print "redctr = 64"
print ""
print "noreduce:"

print "unsigned>? jctr -= 1"
print "goto jlooptop if unsigned>"

print "qinv = mem256[qinv4x]"
print "q = mem256[q4x]"
print ""
print "4x c = approx r0 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r0 approx -= c"
print ""
print "4x c = approx r1 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r1 approx -= c"
print ""
print "4x c = approx r2 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r2 approx -= c"
print ""
print "4x c = approx r3 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r3 approx -= c"
print ""
print "4x c = approx r4 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r4 approx -= c"
print ""
print "4x c = approx r5 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r5 approx -= c"
print ""
print "4x c = approx r6 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r6 approx -= c"
print ""
print "4x c = approx r7 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r7 approx -= c"
print ""
print "4x c = approx r8 * qinv"
print "4x c = round(c)"
print "4x c approx*= q"
print "4x r8 approx -= c"
print ""
print "mem256[rp +     0] = r0"
print "mem256[rp +    32] = r1"
print "mem256[rp +    64] = r2"
print "mem256[rp +  "+str(8*m)+"] = r3"
print "mem256[rp + "+str(8*m+32)+"] = r4"
print "mem256[rp + "+str(8*m+64)+"] = r5"
print "mem256[rp + "+str(16*m)+"] = r6"
print "mem256[rp + "+str(16*m+32)+"] = r7"
print "mem256[rp + "+str(16*m+64)+"] = r8"
print ""
print "rp+=96"
print "ap -= "+str((n-1)*4*m-48)
print ""
print "unsigned>? ictr -= 12"
print "goto ilooptop if unsigned>"
print ""
print "return"
