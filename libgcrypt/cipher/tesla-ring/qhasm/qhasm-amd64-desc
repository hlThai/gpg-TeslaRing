#!/bin/bash

echo ':name:int64:%rdi:%rsi:%rdx:%rcx:%r8:%r9:%rax:%r10:%r11:%r12:%r13:%r14:%r15:%rbx:%rbp:'
echo 'new r:>r=int64:'
echo 'free r:<r=int64:'
echo 'int64 r:var/r=int64:'
echo 'assign 1 to r:<r=int64#1:'
echo 'assign 2 to r:<r=int64#2:'
echo 'assign 3 to r:<r=int64#3:'
echo 'assign 4 to r:<r=int64#4:'
echo 'assign 5 to r:<r=int64#5:'
echo 'assign 6 to r:<r=int64#6:'
echo 'assign 7 to r:<r=int64#7:'
echo 'assign 8 to r:<r=int64#8:'
echo 'assign 9 to r:<r=int64#9:'
echo 'assign 10 to r:<r=int64#10:'
echo 'assign 11 to r:<r=int64#11:'
echo 'assign 12 to r:<r=int64#12:'
echo 'assign 13 to r:<r=int64#13:'
echo 'assign 14 to r:<r=int64#14:'
echo 'assign 15 to r:<r=int64#15:'

echo ':name:float80:%st(0):%st(1):%st(2):%st(3):%st(4):%st(5):%st(6):%st(7):'
echo 'new r:>r=float80:'
echo 'float80 r:var/r=float80:'

echo ':name:reg128:%xmm0:%xmm1:%xmm2:%xmm3:%xmm4:%xmm5:%xmm6:%xmm7:%xmm8:%xmm9:%xmm10:%xmm11:%xmm12:%xmm13:%xmm14:%xmm15:'
echo 'new r:>r=reg128:'
echo 'reg128 r:var/r=reg128:'
echo 'assign xmm0 to r:<r=reg128#1:'
echo 'assign xmm1 to r:<r=reg128#2:'
echo 'assign xmm2 to r:<r=reg128#3:'
echo 'assign xmm3 to r:<r=reg128#4:'
echo 'assign xmm4 to r:<r=reg128#5:'
echo 'assign xmm5 to r:<r=reg128#6:'
echo 'assign xmm6 to r:<r=reg128#7:'
echo 'assign xmm7 to r:<r=reg128#8:'
echo 'assign xmm8 to r:<r=reg128#9:'
echo 'assign xmm9 to r:<r=reg128#10:'
echo 'assign xmm10 to r:<r=reg128#11:'
echo 'assign xmm11 to r:<r=reg128#12:'
echo 'assign xmm12 to r:<r=reg128#13:'
echo 'assign xmm13 to r:<r=reg128#14:'
echo 'assign xmm14 to r:<r=reg128#15:'
echo 'assign xmm15 to r:<r=reg128#16:'



(
  echo 'enter f'
  echo 'enter/f'
  echo 'asm/.p2align 5'
  echo 'asm/.global _#f'
  echo 'asm/.global #f'
  echo 'asm/_#f!colon'
  echo 'asm/#f!colon'
  echo 'asm/mov %rsp,%r11'
  echo 'asm/and $31,%r11'
  echo 'asm/add $!frame,%r11'
  echo 'asm/sub %r11,%rsp'
  echo '>input_0=int64#1'
  echo '>input_1=int64#2'
  echo '>input_2=int64#3'
  echo '>input_3=int64#4'
  echo '>input_4=int64#5'
  echo '>input_5=int64#6'
  echo '>input_6=stack64#arg1'
  echo '>input_7=stack64#arg2'
  echo '>caller_r11=int64#9'
  echo '>caller_r12=int64#10'
  echo '>caller_r13=int64#11'
  echo '>caller_r14=int64#12'
  echo '>caller_r15=int64#13'
  echo '>caller_rbx=int64#14'
  echo '>caller_rbp=int64#15'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'return'
  echo 'nofallthrough'
  echo 'asm/add %r11,%rsp'
  echo 'asm/ret'
  echo '<caller_r11=int64#9'
  echo '<caller_r12=int64#10'
  echo '<caller_r13=int64#11'
  echo '<caller_r14=int64#12'
  echo '<caller_r15=int64#13'
  echo '<caller_rbx=int64#14'
  echo '<caller_rbp=int64#15'
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

(
  echo 'return r'
  echo 'return'
  echo 'nofallthrough'
  echo '<r=int64#7'
  echo 'asm/add %r11,%rsp'
  echo 'asm/ret'
  echo '<caller_r11=int64#9'
  echo '<caller_r12=int64#10'
  echo '<caller_r13=int64#11'
  echo '<caller_r14=int64#12'
  echo '<caller_r15=int64#13'
  echo '<caller_rbx=int64#14'
  echo '<caller_rbp=int64#15'
  echo 'leave'
) | tr '\012' ':'; echo ':' | tr ':' '\012'

echo 'const64 n=m:#n:#m:asm/.p2align 5:asm/#n!colon .quad #m:'

echo ':stackalign:32:'
echo ':stackname::(%rsp):'
echo ':stackargname::(%rsp,%r11):'
echo ':rightbytes:8:'
echo ':stackbytes:stack32:4:'
echo 'stack32 r:var/r=stack32:'
echo 'new r:>r=stack32:'
echo ':stackbytes:stack64:8:'
echo 'stack64 r:var/r=stack64:'
echo 'new r:>r=stack64:'
echo ':stackbytes:stack128:16:'
echo 'stack128 r:var/r=stack128:'
echo 'new r:>r=stack128:'
echo ':stackbytes:stack256:32:'
echo 'stack256 r:var/r=stack256:'
echo 'new r:>r=stack256:'
echo ':stackbytes:stack512:64:'
echo 'stack512 r:var/r=stack512:'
echo 'new r:>r=stack512:'
echo ':stackbytes:stack1600:200:'
echo 'stack1600 r:var/r=stack1600:'
echo 'new r:>r=stack1600:'
echo ':stackbytes:stack2048:256:'
echo 'stack2048 r:var/r=stack2048:'
echo 'new r:>r=stack2048:'

echo 'r = &s:>r=int64:inplace>s=stack32:<s=stack32:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack64:<s=stack64:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack128:<s=stack128:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack256:<s=stack256:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack512:<s=stack512:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack1600:<s=stack1600:asm/leaq <s,>r:'
echo 'r = &s:>r=int64:inplace>s=stack2048:<s=stack2048:asm/leaq <s,>r:'
echo 'r = s:>r=stack64:<s=int64:asm/movq <s,>r:'
echo 'r = s:>r=int64:<s=stack64:asm/movq <s,>r:'


echo ':flag:=:'
echo ':flag:signed<:'
echo ':flag:signed>:'
echo ':flag:unsigned<:'
echo ':flag:unsigned>:'
echo ':flag:carry:'

echo 'f#:#f:label/f:asm/._#f!colon:'
echo 'goto f:#f:nofallthrough:jump/f:asm/jmp ._#f:'
echo 'goto f if =:#f:jump/f:<?=:asm/je ._#f:'
echo 'goto f if !=:#f:jump/f:<?=:asm/jne ._#f:'
echo 'goto f if unsigned>:#f:jump/f:<?unsigned>:asm/ja ._#f:'
echo 'goto f if !unsigned>:#f:jump/f:<?unsigned>:asm/jbe ._#f:'
echo 'goto f if unsigned<:#f:jump/f:<?unsigned<:asm/jb ._#f:'
echo 'goto f if !unsigned<:#f:jump/f:<?unsigned<:asm/jae ._#f:'
echo 'goto f if signed>:#f:jump/f:<?signed>:asm/jg ._#f:'
echo 'goto f if !signed>:#f:jump/f:<?signed>:asm/jle ._#f:'
echo 'goto f if signed<:#f:jump/f:<?signed<:asm/jl ._#f:'
echo 'goto f if !signed<:#f:jump/f:<?signed<:asm/jge ._#f:'
echo 'goto f if carry:#f:jump/f:<?carry:asm/jc ._#f:'

echo 'nop:asm/nop:'

echo '(uint32) bswap r:inplace>r=int64:<r=int64:asm/bswap <r%32:'
echo '(uint64) bswap r:inplace>r=int64:<r=int64:asm/bswap <r'

echo 'r = n:>r=int64:#n:asm/mov  $#n,>r:'
echo 'r = -n:>r=int64:#n:asm/mov  $-#n,>r:'
echo 'r = s:>r=int64:<s=int64:asm/mov  <s,>r:'
echo 'r = &n:>r=int64:#n:asm/lea  #n(%rip),>r:'

echo 'r = ~r:inplace>r=int64:<r=int64:asm/not  <r:'
echo 'r = -r:inplace>r=int64:<r=int64:asm/neg  <r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r += n:inplace>r=int64:<r=int64:#n:asm/add  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r ++ :inplace>r=int64:<r=int64:asm/add  $1,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r += n + carry:inplace>r=int64:<r=int64:#n:asm/adc $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= n:inplace>r=int64:<r=int64:#n:asm/sub  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r -= n - carry:inplace>r=int64:<r=int64:#n:asm/sbb  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r - n:<r=int64:#n:asm/cmp  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r += s:inplace>r=int64:<r=int64:<s=int64:asm/add  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r += s + carry:inplace>r=int64:<r=int64:<s=int64:asm/adc <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= s:inplace>r=int64:<r=int64:<s=int64:asm/sub  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r -= s - carry:inplace>r=int64:<r=int64:<s=int64:asm/sbb  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r - s:<r=int64:<s=int64:asm/cmp  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r = s + n:>r=int64:<s=int64:#n:asm/lea  #n(<s),>r:'
echo 'r = s - n:>r=int64:<s=int64:#n:asm/lea  -#n(<s),>r:'
echo 'r = s + t:>r=int64:<s=int64:<t=int64:asm/lea  (<s,<t),>r:'
echo 'r = s + t + n:>r=int64:<s=int64:<t=int64:#n:asm/lea  #n(<s,<t),>r:'
echo 'offr += t + n:>r=int64:<r=int64:<t=int64:#n:asm/lea  #n(<r,<t),>r:'

echo '(uint32) r += s:inplace>r=int64:<r=int64:<s=int64:asm/add <s%32,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo '(uint32) r += s + carry:inplace>r=int64:<r=int64:<s=int64:asm/adc <s%32,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo '(uint32) r -= s:inplace>r=int64:<r=int64:<s=int64:asm/sub  <s%32,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo '(uint32) r &= n:inplace>r=int64:<r=int64:#n:asm/and  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r |= n:inplace>r=int64:<r=int64:#n:asm/or   $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r ^= n:inplace>r=int64:<r=int64:#n:asm/xor  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r ^= -n:inplace>r=int64:<r=int64:#n:asm/xor  $-#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r <<<= n:inplace>r=int64:<r=int64:#n:asm/rol  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r >>>= n:inplace>r=int64:<r=int64:#n:asm/ror  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r <<= n:inplace>r=int64:<r=int64:#n:asm/shl  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(int64)  r >>= n:inplace>r=int64:<r=int64:#n:asm/sar  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint64) r >>= n:inplace>r=int64:<r=int64:#n:asm/shr  $#n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo '(uint32) r <<<= n:inplace>r=int64:<r=int64:#n:asm/rol  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r >>>= n:inplace>r=int64:<r=int64:#n:asm/ror  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r <<= n:inplace>r=int64:<r=int64:#n:asm/shl  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r >>= n:inplace>r=int64:<r=int64:#n:asm/shr  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(int32)  r >>= n:inplace>r=int64:<r=int64:#n:asm/sar  $#n,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r &= s:inplace>r=int64:<r=int64:<s=int64:asm/and  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r |= s:inplace>r=int64:<r=int64:<s=int64:asm/or   <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r ^= s:inplace>r=int64:<r=int64:<s=int64:asm/xor  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r <<= s:inplace>r=int64:<r=int64:<s=int64#4:asm/shl  %cl,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r <<<= s:inplace>r=int64:<r=int64:<s=int64#4:asm/rol  %cl,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r >>>= s:inplace>r=int64:<r=int64:<s=int64#4:asm/ror  %cl,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(int64)  r >>= s:inplace>r=int64:<r=int64:<s=int64#4:asm/sar  %cl,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint64) r >>= s:inplace>r=int64:<r=int64:<s=int64#4:asm/shr  %cl,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r = s & 255:>r=int64:<s=int64:asm/movzbl  <s%8,>r%32:'
echo 'r = (s >> 8) & 255:>r=int64#1,2,3,4,7,14,15:<s=int64#3,4,7,14:asm/movzbl  <s%next8,>r%32:'
echo 'assign 1 to r = (s >> 8) & 255:>r=int64#1:<s=int64#3,4,7,14:asm/movzbl  <s%next8,>r%32:'
echo 'assign 2 to r = (s >> 8) & 255:>r=int64#2:<s=int64#3,4,7,14:asm/movzbl  <s%next8,>r%32:'
echo 'assign 15 to r = (s >> 8) & 255:>r=int64#15:<s=int64#3,4,7,14:asm/movzbl  <s%next8,>r%32:'

echo 'r = (r.t) << n:inplace>r=int64:<r=int64:#n:<t=int64:asm/shld $#n,<t,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r = (t r) >> n:inplace>r=int64:<r=int64:#n:<t=int64:asm/shrd $#n,<t,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r = (r.t) << s:inplace>r=int64:<r=int64:<s=int64#4:<t=int64:asm/shld %cl,<t,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r = (t r) >> s:inplace>r=int64:<r=int64:<s=int64#4:<t=int64:asm/shrd %cl,<t,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r = s * n:>r=int64:<s=int64:#n:asm/imulq  $#n,<s,>r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r *= n:>r=int64:<r=int64:#n:asm/imulq  $#n,<r,>r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r *= s:inplace>r=int64:<r=int64:<s=int64:asm/imul  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(int128)  t r = r * s:>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=int64:asm/imul <s:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(int128)  t r = r * *(int64 *)(s + n):>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=int64:#n:asm/imulq  #n(<s):>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint128) t r = r * s:>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=int64:asm/mul  <s:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint128) t r = r * *(uint64 *)(s + n):>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=int64:#n:asm/mulq  #n(<s):>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint128) t r = r * mem64[s + n]:>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=int64:#n:asm/mulq  #n(<s):>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

#XXX: Discuss how to handle constants more reasonably
echo 'r = mem64[n]:>r=int64:#n:asm/movq #n,>r:'
echo 'r += mem64[n]:inplace>r=int64:<r=int64:#n:asm/add  #n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r += mem64[s + n]:inplace>r=int64:<r=int64:<s=int64:#n:asm/addq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r -= mem64[s + n]:inplace>r=int64:<r=int64:<s=int64:#n:asm/subq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

# XXX: Discuss with Dan how to handle signed vs. unsigned loads
echo 'r = mem64[s + n]:>r=int64:<s=int64:#n:asm/movq   #n(<s),>r:'
echo 'mem64[s + n] = r:<r=int64:<s=int64:#n:asm/movq   <r,#n(<s):'
echo 'r = mem128[s + n]:>r=reg128:<s=int64:#n:asm/movdqu   #n(<s),>r:'
echo 'mem128[s + n] = r:<r=reg128:<s=int64:#n:asm/movdqu   <r,#n(<s):'
echo 'r aligned= mem128[s + n]:>r=reg128:<s=int64:#n:asm/movdqa   #n(<s),>r:'
echo 'mem128[s + n] aligned= r:<r=reg128:<s=int64:#n:asm/movdqa   <r,#n(<s):'

echo 'r = *(uint8  *) (s + n):>r=int64:<s=int64:#n:asm/movzbq #n(<s),>r:'
echo 'r = *(uint16 *) (s + n):>r=int64:<s=int64:#n:asm/movzwq #n(<s),>r:'
echo 'r = *(uint32 *) (s + n):>r=int64:<s=int64:#n:asm/movl   #n(<s),>r%32:'
echo 'r = *(uint64 *) (s + n):>r=int64:<s=int64:#n:asm/movq   #n(<s),>r:'
echo 'r = *( int8  *) (s + n):>r=int64:<s=int64:#n:asm/movsbq #n(<s),>r:'
echo 'r = *( int16 *) (s + n):>r=int64:<s=int64:#n:asm/movswq #n(<s),>r:'
echo 'r = *( int32 *) (s + n):>r=int64:<s=int64:#n:asm/movslq #n(<s),>r:'
echo 'r = *( int64 *) (s + n):>r=int64:<s=int64:#n:asm/movq   #n(<s),>r:'

echo 'r = *(uint8  *) (s + t):>r=int64:<s=int64:<t=int64:asm/movzbq (<s,<t),>r:'
echo 'r = *(uint16 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movzwq (<s,<t),>r:'
echo 'r = *(uint32 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movl   (<s,<t),>r%32:'
echo 'r = *(uint64 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movq   (<s,<t),>r:'
echo 'r = *( int8  *) (s + t):>r=int64:<s=int64:<t=int64:asm/movsbq (<s,<t),>r:'
echo 'r = *( int16 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movswq (<s,<t),>r:'
echo 'r = *( int32 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movslq (<s,<t),>r:'
echo 'r = *( int64 *) (s + t):>r=int64:<s=int64:<t=int64:asm/movq   (<s,<t),>r:'

echo 'r = *(uint8  *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movzbq (<s,<t,8),>r:'
echo 'r = *(uint16 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movzwq (<s,<t,8),>r:'
echo 'r = *(uint32 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movl   (<s,<t,8),>r%32:'
echo 'r = *(uint64 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movq   (<s,<t,8),>r:'
echo 'r = *( int8  *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movsbq (<s,<t,8),>r:'
echo 'r = *( int16 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movswq (<s,<t,8),>r:'
echo 'r = *( int32 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movslq (<s,<t,8),>r:'
echo 'r = *( int64 *) (s + t * 8):>r=int64:<s=int64:<t=int64:asm/movq   (<s,<t,8),>r:'

echo 'r = *(uint8  *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movzbq #n(<s,<t,8),>r:'
echo 'r = *(uint16 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movzwq #n(<s,<t,8),>r:'
echo 'r = *(uint32 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movl   #n(<s,<t,8),>r%32:'
echo 'r = *(uint32 *) (s + n + t * 4):>r=int64:<s=int64:<t=int64:#n:asm/movl   #n(<s,<t,4),>r%32:'
echo 'r = *(uint64 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movq   #n(<s,<t,8),>r:'
echo 'r = *( int8  *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movsbq #n(<s,<t,8),>r:'
echo 'r = *( int16 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movswq #n(<s,<t,8),>r:'
echo 'r = *( int32 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movslq #n(<s,<t,8),>r:'
echo 'r = *( int64 *) (s + n + t * 8):>r=int64:<s=int64:<t=int64:#n:asm/movq   #n(<s,<t,8),>r:'

echo 'r = *(uint8  *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movzbq #n(<s,<t),>r:'
echo 'r = *(uint16 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movzwq #n(<s,<t),>r:'
echo 'r = *(uint32 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movl   #n(<s,<t),>r%32:'
echo 'r = *(uint64 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movq   #n(<s,<t),>r:'
echo 'r = *( int8  *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movsbq #n(<s,<t),>r:'
echo 'r = *( int16 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movswq #n(<s,<t),>r:'
echo 'r = *( int32 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movslq #n(<s,<t),>r:'
echo 'r = *( int64 *) (s + n + t):>r=int64:<s=int64:<t=int64:#n:asm/movq   #n(<s,<t),>r:'

echo '(uint32) r += *(uint32 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/addl #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo '(uint32) r += *(uint32 *) (s + n) + carry:inplace>r=int64:<r=int64:<s=int64:#n:asm/adcl #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo '(uint32) r -= *(uint32 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/subl #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r &= *(uint32 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/andl #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r |= *(uint32 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/orl  #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r ^= *(uint32 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/xorl #n(<s),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo '(uint32) r += *(uint32 *) (s + n + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:#n:asm/addl #n(<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r -= *(uint32 *) (s + n + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:#n:asm/subl #n(<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r &= *(uint32 *) (s + n + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:#n:asm/andl #n(<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r |= *(uint32 *) (s + n + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:#n:asm/orl #n(<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r ^= *(uint32 *) (s + n + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:#n:asm/xorl #n(<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo '(uint32) r += *(uint32 *) (s + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:asm/addl (<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r -= *(uint32 *) (s + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:asm/subl (<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r &= *(uint32 *) (s + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:asm/andl (<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r |= *(uint32 *) (s + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:asm/orl (<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint32) r ^= *(uint32 *) (s + t * 8):inplace>r=int64:<r=int64:<s=int64:<t=int64:asm/xorl (<s,<t,8),<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r += *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/addq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r += *(uint64 *) (s + n) + carry:inplace>r=int64:<r=int64:<s=int64:#n:asm/adcq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/subq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r &= *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/andq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r |= *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/orq  #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r ^= *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/xorq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo '*(uint8  *) (s + n) = r:<r=int64:<s=int64:#n:asm/movb   <r%8,#n(<s):'
echo '*(uint16 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movw   <r%16,#n(<s):'
echo '*(uint32 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movl   <r%32,#n(<s):'
echo '*(uint64 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movq   <r,#n(<s):'
echo '*( int8  *) (s + n) = r:<r=int64:<s=int64:#n:asm/movb   <r%8,#n(<s):'
echo '*( int16 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movw   <r%16,#n(<s):'
echo '*( int32 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movl   <r%32,#n(<s):'
echo '*( int64 *) (s + n) = r:<r=int64:<s=int64:#n:asm/movq   <r,#n(<s):'

echo '*(uint8  *) (s + n) = m:#m:<s=int64:#n:asm/movb   $#m,#n(<s):'
echo '*(uint16 *) (s + n) = m:#m:<s=int64:#n:asm/movw   $#m,#n(<s):'
echo '*(uint32 *) (s + n) = m:#m:<s=int64:#n:asm/movl   $#m,#n(<s):'
echo '*(uint64 *) (s + n) = m:#m:<s=int64:#n:asm/movq   $#m,#n(<s):'
echo '*( int8  *) (s + n) = m:#m:<s=int64:#n:asm/movb   $#m,#n(<s):'
echo '*( int16 *) (s + n) = m:#m:<s=int64:#n:asm/movw   $#m,#n(<s):'
echo '*( int32 *) (s + n) = m:#m:<s=int64:#n:asm/movl   $#m,#n(<s):'
echo '*( int64 *) (s + n) = m:#m:<s=int64:#n:asm/movq   $#m,#n(<s):'

echo '*(uint8  *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movb   <r%8,(<s,<t):'
echo '*(uint16 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movw   <r%16,(<s,<t):'
echo '*(uint32 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movl   <r%32,(<s,<t):'
echo '*(uint64 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movq   <r,(<s,<t):'
echo '*( int8  *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movb   <r%8,(<s,<t):'
echo '*( int16 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movw   <r%16,(<s,<t):'
echo '*( int32 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movl   <r%32,(<s,<t):'
echo '*( int64 *) (s + t) = r:<r=int64:<s=int64:<t=int64:asm/movq   <r,(<s,<t):'

echo 'while (n) { *y++ = x; --n }:<n=int64#4:<x=int64#7:<y=int64#1:asm/rep stosb:'
echo 'while (n) { *y++ = *x++; --n }:<n=int64#4:<x=int64#2:<y=int64#1:asm/rep movsb:'

# Discuss syntax here
echo 'r unsigned>>= 8:inplace>r=reg128:<r=reg128:asm/psrldq $1,<r:'
echo 'r unsigned>>= 16:inplace>r=reg128:<r=reg128:asm/psrldq $2,<r:'
echo 'r unsigned>>= 24:inplace>r=reg128:<r=reg128:asm/psrldq $3,<r:'
echo 'r unsigned>>= 32:inplace>r=reg128:<r=reg128:asm/psrldq $4,<r:'
echo 'r unsigned>>= 40:inplace>r=reg128:<r=reg128:asm/psrldq $5,<r:'
echo 'r unsigned>>= 48:inplace>r=reg128:<r=reg128:asm/psrldq $6,<r:'
echo 'r unsigned>>= 56:inplace>r=reg128:<r=reg128:asm/psrldq $7,<r:'
echo 'r unsigned>>= 64:inplace>r=reg128:<r=reg128:asm/psrldq $8,<r:'
echo 'r unsigned>>= 72:inplace>r=reg128:<r=reg128:asm/psrldq $9,<r:'
echo 'r unsigned>>= 80:inplace>r=reg128:<r=reg128:asm/psrldq $10,<r:'
echo 'r unsigned>>= 88:inplace>r=reg128:<r=reg128:asm/psrldq $11,<r:'
echo 'r unsigned>>= 96:inplace>r=reg128:<r=reg128:asm/psrldq $12,<r:'
echo 'r unsigned>>= 104:inplace>r=reg128:<r=reg128:asm/psrldq $13,<r:'
echo 'r unsigned>>= 112:inplace>r=reg128:<r=reg128:asm/psrldq $14,<r:'
echo 'r unsigned>>= 120:inplace>r=reg128:<r=reg128:asm/psrldq $15,<r:'

echo '2x r unsigned>>= n:inplace>r=reg128:<r=reg128:#n:asm/psrlq $#n,<r:'
echo '2x r <<= n:inplace>r=reg128:<r=reg128:#n:asm/psllq $#n,<r:'

echo 'r <<= 8:inplace>r=reg128:<r=reg128:#n:asm/pslldq $1,<r:'
echo 'r <<= 16:inplace>r=reg128:<r=reg128:#n:asm/pslldq $2,<r:'
echo 'r <<= 24:inplace>r=reg128:<r=reg128:#n:asm/pslldq $3,<r:'
echo 'r <<= 32:inplace>r=reg128:<r=reg128:#n:asm/pslldq $4,<r:'
echo 'r <<= 40:inplace>r=reg128:<r=reg128:#n:asm/pslldq $5,<r:'
echo 'r <<= 48:inplace>r=reg128:<r=reg128:#n:asm/pslldq $6,<r:'
echo 'r <<= 56:inplace>r=reg128:<r=reg128:#n:asm/pslldq $7,<r:'
echo 'r <<= 64:inplace>r=reg128:<r=reg128:#n:asm/pslldq $8,<r:'
echo 'r <<= 72:inplace>r=reg128:<r=reg128:#n:asm/pslldq $9,<r:'
echo 'r <<= 80:inplace>r=reg128:<r=reg128:#n:asm/pslldq $10,<r:'
echo 'r <<= 88:inplace>r=reg128:<r=reg128:#n:asm/pslldq $11,<r:'
echo 'r <<= 96:inplace>r=reg128:<r=reg128:#n:asm/pslldq $12,<r:'
echo 'r <<= 104:inplace>r=reg128:<r=reg128:#n:asm/pslldq $13,<r:'
echo 'r <<= 112:inplace>r=reg128:<r=reg128:#n:asm/pslldq $14,<r:'
echo 'r <<= 120:inplace>r=reg128:<r=reg128:#n:asm/pslldq $15,<r:'

echo 'r = s:>r=reg128:<s=reg128:asm/movdqa <s,>r:'
echo 'r ^= s:inplace>r=reg128:<r=reg128:<s=reg128:asm/pxor <s,<r:'
echo 'r &= s:inplace>r=reg128:<r=reg128:<s=reg128:asm/pand <s,<r:'
echo 'r |= s:inplace>r=reg128:<r=reg128:<s=reg128:asm/por  <s,<r:'
echo 'r ^= mem128[s + n]:inplace>r=reg128:<r=reg128:<s=int64:#n:asm/pxor #n(<s),<r:'
echo 'r &= mem128[s + n]:inplace>r=reg128:<r=reg128:<s=int64:#n:asm/pand #n(<s),<r:'
echo 'r |= mem128[s + n]:inplace>r=reg128:<r=reg128:<s=int64:#n:asm/por  #n(<s),<r:'

# Discuss syntax
echo 'shuffle bytes of r by s:inplace>r=reg128:<r=reg128:<s=reg128:asm/pshufb <s,<r:'
echo 'shuffle bytes of r by n:inplace>r=reg128:<r=reg128:#n:asm/pshufb #n,<r:'
echo 'r = shuffle dwords of s by n:>r=reg128:<s=reg128:#n:asm/pshufd $#n,<s,>r:'

echo 'unpack low bytes of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpcklbw <s,<r:'
echo 'unpack low words of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpcklwd <s,<r:'
echo 'unpack low dwords of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpckldq <s,<r:'
echo 'unpack low qwords of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpcklqdq <s,<r:'
echo 'unpack high bytes of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpckhbw <s,<r:'
echo 'unpack high words of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpckhwd <s,<r:'
echo 'unpack high dwords of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpckhdq <s,<r:'
echo 'unpack high qwords of r and s:inplace>r=reg128:<r=reg128:<s=reg128:#n:asm/punpckhqdq <s,<r:'

echo 'r = n:>r=reg128:#n:asm/movdqa #n,>r:'
echo 'r ^= n:inplace>r=reg128:<r=reg128:#n:asm/pxor #n,<r:'
echo 'r &= n:inplace>r=reg128:<r=reg128:#n:asm/pand #n,<r:'
echo 'r |= n:inplace>r=reg128:<r=reg128:#n:asm/por  #n,<r:'

echo '8x r unsigned>>= n:inplace>r=reg128:<r=reg128:#n:asm/psrlw $#n,<r:'
echo '8x r <<= n:inplace>r=reg128:<r=reg128:#n:asm/psllw $#n,<r:'

echo 'r = 0:>r=float80:fpstack/load:asm/fldz:'
echo 'stackpop r:<r=float80:fpstack/pop:asm/fstp %st(0):'
echo 'stacktop r:<r=float80:fpstack/top:asm/fxch <r:'

echo 'r *= s:inplace>r=float80:<r=float80:<s=float80:fpstack/arith:asm/fmul <s,<r!nopop:asm/fmulp <s,<r!pop:'
echo 'r *= n:inplace>r=float80:<r=float80:#n:fpstack/arith:asm/fmull #n:'
echo 'r += s:inplace>r=float80:<r=float80:<s=float80:fpstack/arith:asm/fadd <s,<r!nopop:asm/faddp <s,<r!pop:'
echo 'r -= s:inplace>r=float80:<r=float80:<s=float80:fpstack/arith:asm/fsub <s,<r!nopop!noreverse:asm/fsubr <s,<r!nopop!reverse:asm/fsubp <s,<r!pop!noreverse:asm/fsubrp <s,<r!pop!reverse:'
echo 'r -= s;negate:inplace>r=float80:<r=float80:<s=float80:fpstack/arith:asm/fsubr <s,<r!nopop!noreverse:asm/fsub <s,<r!nopop!reverse:asm/fsubrp <s,<r!pop!noreverse:asm/fsubp <s,<r!pop!reverse:'

echo 'round r:inplace>r=float80:<r=float80:asm/frndint:'
echo 'round *(uint16 *) &n:#n:asm/fldcw #n(%rip):'

echo 'r = *(float64 *) &n:>r=float80:#n:fpstack/load:asm/fldl #n(%rip):'
echo 'r = *(float64 *) (s + n):>r=float80:<s=int64:#n:fpstack/load:asm/fldl #n(<s):'

echo 'r = *(int32 *) &n:>r=float80:#n:fpstack/load:asm/fildl #n(%rip):'
echo 'r = *(int32 *) (s + n):>r=float80:<s=int64:#n:fpstack/load:asm/fildl #n(<s):'

echo 'r += *(float64 *) &n:inplace>r=float80:<r=float80:#n:fpstack/loadarith:asm/faddl #n(%rip):'
echo 'r += *(float64 *) (s + n):inplace>r=float80:<r=float80:<s=int64:#n:fpstack/loadarith:asm/faddl #n(<s):'
echo 'r -= *(float64 *) &n:inplace>r=float80:<r=float80:#n:fpstack/loadarith:asm/fsubl #n(%rip):'
echo 'r -= *(float64 *) (s + n):inplace>r=float80:<r=float80:<s=int64:#n:fpstack/loadarith:asm/fsubl #n(<s):'
echo 'r *= *(float64 *) &n:inplace>r=float80:<r=float80:#n:fpstack/loadarith:asm/fmull #n(%rip):'
echo 'r *= *(float64 *) (s + n):inplace>r=float80:<r=float80:<s=int64:#n:fpstack/loadarith:asm/fmull #n(<s):'

echo '*(float64 *) (s + n) = r:<r=float80:<s=int64:#n:fpstack/store:asm/fstl #n(<s)!nopop:asm/fstpl #n(<s)!pop:'

echo 'r top = n:>r=stack64:#n:asm/movl  $#n,!shift4>r:'
echo 'inplace r bottom = s:inplace>r=stack64:<r=stack64:<s=int64:asm/movl <s%32,<r:'
echo 'r = bottom s:>r=int64:<s=stack64:asm/movl <s,>r%32:'
echo 'r = top s:>r=int64:<s=stack64:asm/movl !shift4<s,>r%32:'

echo 'r += s:inplace>r=int64:<r=int64:<s=stack64:asm/addq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r += s + carry:inplace>r=int64:<r=int64:<s=stack64:asm/adcq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r -= s:inplace>r=int64:<r=int64:<s=stack64:asm/subq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r &= s:inplace>r=int64:<r=int64:<s=stack64:asm/andq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r |= s:inplace>r=int64:<r=int64:<s=stack64:asm/orq  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r ^= s:inplace>r=int64:<r=int64:<s=stack64:asm/xorq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'

echo '(uint32) r += s:inplace>r=int64:<r=int64:<s=stack64:asm/addl <s,<r%32:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'

echo 'r = *(float64 *) &s:>r=float80:<s=stack64:fpstack/load:asm/fldl <s:'
echo 'r += *(float64 *) &s:inplace>r=float80:<r=float80:<s=stack64:fpstack/loadarith:asm/faddl <s:'
echo 'r -= *(float64 *) &s:inplace>r=float80:<r=float80:<s=stack64:fpstack/loadarith:asm/fsubl <s:'
echo 'r *= *(float64 *) &s:inplace>r=float80:<r=float80:<s=stack64:fpstack/loadarith:asm/fmull <s:'
echo '*(float64 *) &s = r:<r=float80:>s=stack64:fpstack/store:asm/fstl >s!nopop:asm/fstpl >s!pop:'

echo '((uint32 *)&r)[0] = 0:>r=stack128:asm/movl $0,>r:'
echo '((uint32 *)&r)[1] = 0:inplace>r=stack128:<r=stack128:asm/movl $0,4+<r:'
echo '((uint32 *)&r)[2] = 0:inplace>r=stack128:<r=stack128:asm/movl $0,8+<r:'
echo '((uint32 *)&r)[3] = 0:inplace>r=stack128:<r=stack128:asm/movl $0,12+<r:'
echo '((uint32 *)&r)[0] = s:>r=stack128:<s=int64:asm/movl <s%32,>r:'
echo '((uint32 *)&r)[1] = s:inplace>r=stack128:<r=stack128:<s=int64:asm/movl <s%32,4+<r:'
echo '((uint32 *)&r)[2] = s:inplace>r=stack128:<r=stack128:<s=int64:asm/movl <s%32,8+<r:'
echo '((uint32 *)&r)[3] = s:inplace>r=stack128:<r=stack128:<s=int64:asm/movl <s%32,12+<r:'

echo 'r = s:>r=reg128:<s=stack128:asm/movdqa <s,>r:'
echo 'r = s:>r=stack128:<s=reg128:asm/movdqa <s,>r:'

echo 'r = *(uint64 *) &n:>r=int64:#n:asm/movq #n,>r:'
echo 'r &= *(uint64 *) &n:>r=int64:#n:asm/movq #n,>r:'
echo 'r += *(uint64 *) &n:inplace>r=int64:<r=int64:#n:asm/add  #n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo '(uint128) t r = r * *(uint64 *) &n:>t=int64#3:inplace>r=int64#7:<r=int64#7:#n:asm/mulq  #n:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint128) t r = r * s:>t=int64#3:inplace>r=int64#7:<r=int64#7:<s=stack64:asm/mulq  <s:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo '(uint64) r *= s:inplace>r=int64:<r=int64:<s=int64:asm/mul  <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:'
echo 'r -= *(uint64 *)&n:inplace>r=int64:<r=int64:#n:asm/sub  #n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r -= *(uint64 *)&n - carry:inplace>r=int64:<r=int64:#n:asm/sbb  #n,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= *(uint64 *) (s + n) - carry:inplace>r=int64:<r=int64:<s=int64:#n:asm/sbbq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= s - carry:inplace>r=int64:<r=int64:<s=stack64:#n:asm/sbbq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r += s + carry:inplace>r=int64:<r=int64:<s=stack64:#n:asm/adcq <s,<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:<?carry:'
echo 'r -= *(uint64 *) (s + n):inplace>r=int64:<r=int64:<s=int64:#n:asm/subq #n(<s),<r:>?=:>?unsigned>:>?unsigned<:>?signed>:>?signed<:>?carry:'
echo 'r = s if !unsigned<:inplace>r=int64:<r=int64:<s=int64:<?unsigned<:asm/cmovae <s,<r:'
echo 'r = s if carry:inplace>r=int64:<r=int64:<s=int64:<?carry:asm/cmovc <s,<r:'
echo 'r = s if !carry:inplace>r=int64:<r=int64:<s=int64:<?carry:asm/cmovae <s,<r:'
echo 'r = s if signed<:inplace>r=int64:<r=int64:<s=int64:<?signed<:asm/cmovl <s,<r:'
echo 'r = s if =:inplace>r=int64:<r=int64:<s=int64:<?=:asm/cmove <s,<r:'
echo '*(uint64 *) (s + t * 8) = r:<r=int64:<s=int64:<t=int64:asm/movq  <r,(<s,<t,8):'

echo 'r = s if !=:inplace>r=int64:<r=int64:<s=int64:<?=:asm/cmovne <s,<r:'
echo ':'

echo 'int64 input_0'
echo 'int64 input_1'
echo 'int64 input_2'
echo 'int64 input_3'
echo 'int64 input_4'
echo 'int64 input_5'
echo 'stack64 input_6'
echo 'stack64 input_7'
echo 'int64 caller_r11'
echo 'int64 caller_r12'
echo 'int64 caller_r13'
echo 'int64 caller_r14'
echo 'int64 caller_r15'
echo 'int64 caller_rbx'
echo 'int64 caller_rbp'
#echo 'startcode'
