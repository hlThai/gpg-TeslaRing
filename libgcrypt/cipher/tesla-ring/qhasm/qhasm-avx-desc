#!/bin/sh

echo ':name:reg256:%ymm0:%ymm1:%ymm2:%ymm3:%ymm4:%ymm5:%ymm6:%ymm7:%ymm8:%ymm9:%ymm10:%ymm11:%ymm12:%ymm13:%ymm14:%ymm15:'
echo 'new r:>r=reg256:'
echo 'free r:<r=reg256:'
echo 'reg256 r:var/r=reg256:'
echo 'assign ymm0 to r:<r=reg256#1:'
echo 'assign ymm1 to r:<r=reg256#2:'
echo 'assign ymm2 to r:<r=reg256#3:'
echo 'assign ymm3 to r:<r=reg256#4:'
echo 'assign ymm4 to r:<r=reg256#5:'
echo 'assign ymm5 to r:<r=reg256#6:'
echo 'assign ymm6 to r:<r=reg256#7:'
echo 'assign ymm7 to r:<r=reg256#8:'
echo 'assign ymm8 to r:<r=reg256#9:'
echo 'assign ymm9 to r:<r=reg256#10:'
echo 'assign ymm10 to r:<r=reg256#11:'
echo 'assign ymm11 to r:<r=reg256#12:'
echo 'assign ymm12 to r:<r=reg256#13:'
echo 'assign ymm13 to r:<r=reg256#14:'
echo 'assign ymm14 to r:<r=reg256#15:'
echo 'assign ymm15 to r:<r=reg256#16:'

echo 'r ^= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vxorpd <s,<r,<r:'
echo 'r &= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vandpd <s,<r,<r:'
echo 'r |= s:inplace>r=reg256:<r=reg256:<s=reg256:asm/vorpd  <s,<r,<r:'
echo 'r ^= n:inplace>r=reg256:<r=reg256:#n:asm/vxorpd #n,<r,<r:'
echo 'r &= n:inplace>r=reg256:<r=reg256:#n:asm/vandpd #n,<r,<r:'
echo 'r |= n:inplace>r=reg256:<r=reg256:#n:asm/vorpd  #n,<r,<r:'
echo 'r ^= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vxorpd #n(<s),<r,<r:'
echo 'r &= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vandpd #n(<s),<r,<r:'
echo 'r |= mem256[s + n]:inplace>r=reg256:<r=reg256:<s=int64:#n:asm/vorpd  #n(<s),<r,<r:'
echo 'r = s ^ t:>r=reg256:<s=reg256:<t=reg256:asm/vxorpd <s,<t,>r:'
echo 'r = s & t:>r=reg256:<s=reg256:<t=reg256:asm/vandpd <s,<t,>r:'
echo 'r = s | t:>r=reg256:<s=reg256:<t=reg256:asm/vorpd  <s,<t,>r:'
echo 'r = s ^ n:>r=reg256:<s=reg256:#n:asm/vxorpd #n,<s,>r:'
echo 'r = s & n:>r=reg256:<s=reg256:#n:asm/vandpd #n,<s,>r:'
echo 'r = s | n:>r=reg256:<s=reg256:#n:asm/vorpd  #n,<s,>r:'
echo '8x r = s unsigned>> n:>r=reg256:<s=reg256:#n:asm/vpsrld $#n,<s,>r:'
echo '8x r = s << n:>r=reg256:<s=reg256:#n:asm/vpslld $#n,<s,>r:'
echo 'r = mem256[s + n]:>r=reg256:<s=int64:#n:asm/vmovupd   #n(<s),>r:'
echo 'r = mem256[s - n]:>r=reg256:<s=int64:#n:asm/vmovupd   -#n(<s),>r:'
echo 'mem256[s + n] = r:<r=reg256:<s=int64:#n:asm/vmovupd   <r,#n(<s):'
echo 'mem256[s - n] = r:<r=reg256:<s=int64:#n:asm/vmovupd   <r,-#n(<s):'
echo 'r aligned= mem256[s + n]:>r=reg256:<s=int64:#n:asm/vmovapd   #n(<s),>r:'
echo 'r aligned= mem256[s - n]:>r=reg256:<s=int64:#n:asm/vmovapd   -#n(<s),>r:'
echo 'mem256[s + n] aligned= r:<r=reg256:<s=int64:#n:asm/vmovapd   <r,#n(<s):'
echo 'mem256[s - n] aligned= r:<r=reg256:<s=int64:#n:asm/vmovapd   <r,-#n(<s):'
echo 'r = s:>r=reg256:<s=stack256:asm/vmovapd <s,>r:'
echo 'r = s:>r=stack256:<s=reg256:asm/vmovapd <s,>r:'

# AVX double-precision arithmetic
echo '4x r = approx s * t:>r=reg256:<s=reg256:<t=reg256:asm/vmulpd <s,<t,>r:'
echo '4x r = approx s * mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vmulpd #n(<t),<s,>r:'
echo '4x r = approx s * mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vmulpd -#n(<t),<s,>r:'
echo '4x r = approx s * mem256[n]:>r=reg256:<s=reg256:#n:asm/vmulpd #n,<s,>r:'
echo '4x r = approx s * t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vmulpd <t,<s,>r:'
echo '4x r approx*= s:>r=reg256:<s=reg256:<r=reg256:asm/vmulpd <s,<r,>r:'
echo '4x r approx*= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vmulpd #n(<t),<r,>r:'
echo '4x r approx*= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vmulpd -#n(<t),<r,>r:'
echo '4x r approx*= mem256[n]:>r=reg256:<r=reg256:#n:asm/vmulpd #n,<r,>r:'
echo '4x r approx*= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vmulpd <s,<r,>r:'

echo '4x r = s if c<0 else t:>r=reg256:<s=reg256:<t=reg256:<c=reg256:asm/vblendvpd <c,<s,<t,>r:'

echo '4x r approx+= s * t:inplace>r=reg256:<r=reg256:<s=reg256:<t=reg256:asm/vfmadd231pd <s,<t,<r:'
echo '4x r approx+= s * mem256[t + n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfmadd231pd #n(<t),<s,<r:'
echo '4x r approx+= s * mem256[t - n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfmadd231pd -#n(<t),<s,<r:'
echo '4x r approx-= s * t:inplace>r=reg256:<r=reg256:<s=reg256:<t=reg256:asm/vfnmadd231pd <s,<t,<r:'
echo '4x r approx-= s * mem256[t + n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfnmadd231pd #n(<t),<s,<r:'
echo '4x r approx-= s * mem256[t - n]:inplace>r=reg256:<r=reg256:<s=reg256:<t=int64:#n:asm/vfnmadd231pd -#n(<t),<s,<r:'

echo '4x r = approx s + t:>r=reg256:<s=reg256:<t=reg256:asm/vaddpd <s,<t,>r:'
echo '4x r = approx s + mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vaddpd #n(<t),<s,>r:'
echo '4x r = approx s + mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vaddpd -#n(<t),<s,>r:'
echo '4x r = approx s + mem256[n]:>r=reg256:<s=reg256:#n:asm/vaddpd #n,<s,>r:'
echo '4x r = approx s + t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vaddpd <t,<s,>r:'
echo '4x r approx+= s:>r=reg256:<s=reg256:<r=reg256:asm/vaddpd <s,<r,>r:'
echo '4x r approx+= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vaddpd #n(<t),<r,>r:'
echo '4x r approx+= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vaddpd -#n(<t),<r,>r:'
echo '4x r approx+= mem256[n]:>r=reg256:<r=reg256:#n:asm/vaddpd #n,<r,>r:'
echo '4x r approx+= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vaddpd <s,<r,>r:'

echo '4x r = approx s - t:>r=reg256:<s=reg256:<t=reg256:asm/vsubpd <t,<s,>r:'
echo '4x r = approx s - mem256[t + n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vsubpd #n(<t),<s,>r:'
echo '4x r = approx s - mem256[t - n]:>r=reg256:<s=reg256:<t=int64:#n:asm/vsubpd -#n(<t),<s,>r:'
echo '4x r = approx s - mem256[n]:>r=reg256:<s=reg256:#n:asm/vsubpd #n,<s,>r:'
echo '4x r = approx s - t:>r=reg256:<s=reg256:<t=stack256:#n:asm/vsubpd <t,<s,>r:'
echo '4x r approx-= s:>r=reg256:<s=reg256:<r=reg256:asm/vsubpd <s,<r,>r:'
echo '4x r approx-= mem256[t + n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vsubpd #n(<t),<r,>r:'
echo '4x r approx-= mem256[t - n]:>r=reg256:<r=reg256:<t=int64:#n:asm/vsubpd -#n(<t),<r,>r:'
echo '4x r approx-= mem256[n]:>r=reg256:<r=reg256:#n:asm/vsubpd #n,<r,>r:'
echo '4x r approx-= s:>r=reg256:<r=reg256:<s=stack256:#n:asm/vsubpd <s,<r,>r:'

echo 'r[0,1,2,3] = s[0]approx+s[1],t[0]approx+t[1],s[2]approx+s[3],t[2]approx+t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vhaddpd <t,<s,>r:'
echo 'r[0,1,2,3] = s[0]approx-s[1],t[0]approx-t[1],s[2]approx-s[3],t[2]approx-t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vhsubpd <t,<s,>r:'

echo 'r[0,1,2,3] approx= s[0]-t[0],s[1]+t[1],s[2]-t[2],s[3]+t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vaddsubpd <t,<s,>r:'

echo 'r[0,1,2,3] = s[0,0,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x0,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x1,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x2,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,2,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x3,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x4,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x5,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x6,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,3,2]:>r=reg256:<s=reg256:asm/vpermilpd $0x7,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0x8,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0x9,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xa,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,2,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xb,<s,>r:'
echo 'r[0,1,2,3] = s[0,0,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xc,<s,>r:'
echo 'r[0,1,2,3] = s[1,0,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xd,<s,>r:'
echo 'r[0,1,2,3] = s[0,1,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xe,<s,>r:'
echo 'r[0,1,2,3] = s[1,1,3,3]:>r=reg256:<s=reg256:asm/vpermilpd $0xf,<s,>r:'
echo 'r[0,1,2,3] = s[0,1],t[0,1]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x20,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0,1],t[2,3]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x30,<t,<s,>r:'
echo 'r[0,1,2,3] = s[2,3],t[0,1]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x21,<t,<s,>r:'
echo 'r[0,1,2,3] = s[2,3],t[2,3]:>r=reg256:<s=reg256:<t=reg256:asm/vperm2f128 $0x31,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x0,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x1,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x2,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[2]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x3,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x4,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x5,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x6,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[3]t[2]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x7,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x8,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0x9,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xa,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[2]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xb,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[0]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xc,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[0]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xd,<t,<s,>r:'
echo 'r[0,1,2,3] = s[0]t[1]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xe,<t,<s,>r:'
echo 'r[0,1,2,3] = s[1]t[1]s[3]t[3]:>r=reg256:<s=reg256:<t=reg256:asm/vshufpd $0xf,<t,<s,>r:'

echo '4x r = round(s):>r=reg256:<s=reg256:asm/vroundpd $8,<s,>r:'
echo '4x r = floor(s):>r=reg256:<s=reg256:asm/vroundpd $9,<s,>r:'
echo '4x r = ceil(s):>r=reg256:<s=reg256:asm/vroundpd $10,<s,>r:'
echo '4x r = trunc(s):>r=reg256:<s=reg256:asm/vroundpd $11,<s,>r:'

echo 'r = s:>r=reg256:<s=reg256:asm/vmovapd <s,>r:'
echo 'r aligned= mem256[n]:>r=reg256:#n:asm/vmovapd #n,>r:'
echo 'r = mem256[n]:>r=reg256:#n:asm/vmovupd #n,>r:'
echo 'r aligned= s:>r=reg256:<s=stack256:asm/vmovapd <s,>r:'
echo 'r aligned= s:>r=stack256:<s=reg256:asm/vmovapd <s,>r:'
echo 'r = s,s,s,s:>r=reg256:<s=stack64:asm/vbroadcastsd <s,>r:'
echo 'r = mem64[s+n],mem64[s+n],mem64[s+n],mem64[s+n]:>r=reg256:<s=int64:#n:asm/vbroadcastsd #n(<s),>r:'

echo 'r = (4x double)(4x int32)mem128[s +  n]:>r=reg256:<s=int64:#n:asm/vcvtdq2pd #n(<s),>r:'
echo 'r = (4x int32)(4x double) s,0,0,0,0:>r=reg256:<s=reg256:asm/vcvtpd2dq <s,>r%128:'
echo 'mem128[s + n] = r:<s=int64:<r=reg256:#n:asm/movupd <r%128,#n(<s):'

